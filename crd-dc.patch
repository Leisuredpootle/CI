From b3ff5dd6f160931cbc86286aa2fdc4605c735c8c Mon Sep 17 00:00:00 2001
From: abc <abc@gmail.com>
Date: Wed, 10 Jun 2020 22:11:31 +0800
Subject: [PATCH] dc

---
 arch/arm64/configs/lineage_oneplus5_defconfig |   1 +
 drivers/video/fbdev/msm/Kconfig               |   8 +
 drivers/video/fbdev/msm/Makefile              |   2 +
 drivers/video/fbdev/msm/flicker_free.c        | 199 ++++++++++++++++++
 drivers/video/fbdev/msm/flicker_free.h        |  59 ++++++
 .../video/fbdev/msm/flicker_free_enabler.c    | 121 +++++++++++
 drivers/video/fbdev/msm/mdss_fb.c             |  24 +++
 drivers/video/fbdev/msm/mdss_fb.h             |   8 +
 drivers/video/fbdev/msm/mdss_mdp.h            |   4 +
 drivers/video/fbdev/msm/mdss_mdp_pp.c         | 178 ++++++++++++++++
 drivers/video/fbdev/msm/mdss_mdp_pp.h         |   4 +
 .../fbdev/msm/mdss_mdp_pp_cache_config.c      |  25 ++-
 drivers/video/fbdev/msm/mdss_mdp_pp_v1_7.c    |   4 +
 13 files changed, 632 insertions(+), 5 deletions(-)
 create mode 100644 drivers/video/fbdev/msm/flicker_free.c
 create mode 100644 drivers/video/fbdev/msm/flicker_free.h
 create mode 100644 drivers/video/fbdev/msm/flicker_free_enabler.c

diff --git a/arch/arm64/configs/lineage_oneplus5_defconfig b/arch/arm64/configs/lineage_oneplus5_defconfig
index 14ba42ba54a5..c6bb641972dc 100644
--- a/arch/arm64/configs/lineage_oneplus5_defconfig
+++ b/arch/arm64/configs/lineage_oneplus5_defconfig
@@ -2971,6 +2971,7 @@ CONFIG_FB_CFB_IMAGEBLIT=y
 # CONFIG_FB_BACKLIGHT is not set
 CONFIG_FB_MODE_HELPERS=y
 # CONFIG_FB_TILEBLITTING is not set
+CONFIG_FLICKER_FREE=y
 
 #
 # Frame buffer hardware drivers
diff --git a/drivers/video/fbdev/msm/Kconfig b/drivers/video/fbdev/msm/Kconfig
index f7f1c470ea98..9abc0b3ee2e6 100644
--- a/drivers/video/fbdev/msm/Kconfig
+++ b/drivers/video/fbdev/msm/Kconfig
@@ -169,6 +169,14 @@ config IRIS2P_DRC_SUPPORT
 	default n
 	---help---
 	Say y to enable
+
+config FLICKER_FREE
+	bool "Enable flicker free driver"
+	depends on FB_MSM_MDSS
+	---help---
+	The flicker free provides flicker free function without change
+	panel hardware brightness to avoid PWM flicker on OLED devices.
+
 #endif
 
 endif
diff --git a/drivers/video/fbdev/msm/Makefile b/drivers/video/fbdev/msm/Makefile
index 648372727b3b..375843da0927 100644
--- a/drivers/video/fbdev/msm/Makefile
+++ b/drivers/video/fbdev/msm/Makefile
@@ -31,6 +31,8 @@ ifeq ($(CONFIG_FB_MSM_MDSS),y)
 obj-$(CONFIG_DEBUG_FS) += mdss_debug.o mdss_debug_xlog.o
 endif
 
+obj-$(CONFIG_FLICKER_FREE) += flicker_free.o flicker_free_enabler.o
+
 mdss-dsi-objs := mdss_dsi.o mdss_dsi_host.o mdss_dsi_cmd.o mdss_dsi_status.o
 mdss-dsi-objs += mdss_dsi_panel.o
 mdss-dsi-objs += msm_mdss_io_8974.o
diff --git a/drivers/video/fbdev/msm/flicker_free.c b/drivers/video/fbdev/msm/flicker_free.c
new file mode 100644
index 000000000000..aa12d2c68939
--- /dev/null
+++ b/drivers/video/fbdev/msm/flicker_free.c
@@ -0,0 +1,199 @@
+/*
+ * An flicker free driver based on Qcom MDSS for OLED devices
+ *
+ * Copyright (C) 2012-2014, The Linux Foundation. All rights reserved.
+ * Copyright (C) Sony Mobile Communications Inc. All rights reserved.
+ * Copyright (C) 2014-2018, AngeloGioacchino Del Regno <kholk11@gmail.com>
+ * Copyright (C) 2018, Devries <therkduan@gmail.com>
+ * Copyright (C) 2019-2020, Tanish <tanish2k09.dev@gmail.com>
+ * Copyright (C) 2020, shxyke <shxyke@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/init.h>
+#include <linux/rtc.h>
+#include <linux/timer.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+
+#include "flicker_free.h"
+#include "mdss_fb.h"
+
+#include "mdss_mdp.h"
+
+struct mdss_panel_data *pdata;
+struct mdp_pcc_cfg_data pcc_config;
+struct mdp_pcc_data_v1_7 *payload;
+struct mdp_dither_cfg_data dither_config;
+struct mdp_dither_data_v1_7 *dither_payload;
+u32 copyback = 0;
+u32 dither_copyback = 0;
+static u32 backlight = 0;
+static const u32 pcc_depth[9] = {128,256,512,1024,2048,4096,8192,16384,32768};
+static u32 depth = 8;
+static bool pcc_enabled = false;
+static bool mdss_backlight_enable = false;
+
+#ifdef RET_WORKGROUND
+static struct delayed_work back_to_backlight_work,back_to_pcc_work;
+static void back_to_backlight(struct work_struct *work)
+{
+		pdata = dev_get_platdata(&get_mfd_copy()->pdev->dev);
+			pdata->set_backlight(pdata,backlight);
+				return;
+}
+
+static void back_to_pcc(struct work_struct *work)
+{
+	mdss_panel_calc_backlight(backlight);
+}
+#endif
+
+static int flicker_free_push_dither(int depth)
+{
+	dither_config.flags = mdss_backlight_enable ?
+		MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE :
+			MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
+	dither_config.r_cr_depth = depth;
+	dither_config.g_y_depth = depth;
+	dither_config.b_cb_depth = depth;
+	dither_payload->len = 0;
+	dither_payload->temporal_en = 0;
+	dither_payload->r_cr_depth = dither_config.r_cr_depth;
+	dither_payload->g_y_depth = dither_config.g_y_depth;
+	dither_payload->b_cb_depth = dither_config.b_cb_depth;
+	dither_config.cfg_payload = dither_payload;
+
+	return mdss_mdp_dither_config(get_mfd_copy(),&dither_config,&dither_copyback,1);
+}
+
+static int flicker_free_push_pcc(int temp)
+{
+	pcc_config.ops = pcc_enabled ? 
+		MDP_PP_OPS_WRITE | MDP_PP_OPS_ENABLE :
+			MDP_PP_OPS_WRITE | MDP_PP_OPS_DISABLE;
+	pcc_config.r.r = temp;
+	pcc_config.g.g = temp;
+	pcc_config.b.b = temp;
+	payload->r.r = pcc_config.r.r;
+	payload->g.g = pcc_config.g.g;
+	payload->b.b = pcc_config.b.b;
+	pcc_config.cfg_payload = payload;
+
+	return mdss_mdp_kernel_pcc_config(get_mfd_copy(), &pcc_config, &copyback);
+}
+
+static int set_brightness(int backlight)
+{
+	uint32_t temp = 0;
+	backlight = clamp_t(int, ((backlight-1)*(BACKLIGHT_INDEX-1)/(elvss_off_threshold-1)+1), 1, BACKLIGHT_INDEX);
+	temp = clamp_t(int, 0x80*bkl_to_pcc[backlight - 1], FF_MIN_SCALE, FF_MAX_SCALE);
+	for (depth = 8;depth >= 1;depth--){
+		if(temp >= pcc_depth[depth]) break;
+	}
+	flicker_free_push_dither(depth);
+	return flicker_free_push_pcc(temp);
+}
+
+u32 mdss_panel_calc_backlight(u32 bl_lvl)
+{
+	if (mdss_backlight_enable && bl_lvl != 0 && bl_lvl < elvss_off_threshold) {
+		printk("flicker free mode on\n");
+		printk("elvss_off = %d\n", elvss_off_threshold);
+		pcc_enabled = true;
+		if(!set_brightness(bl_lvl))
+			return elvss_off_threshold;
+	}else{
+		if(bl_lvl && pcc_enabled){
+			pcc_enabled = false;
+			set_brightness(elvss_off_threshold);
+		}
+	}
+	return bl_lvl;
+}
+
+
+void set_flicker_free(bool enabled)
+{
+	if(mdss_backlight_enable == enabled) return;
+	mdss_backlight_enable = enabled;
+	if (get_mfd_copy())
+		pdata = dev_get_platdata(&get_mfd_copy()->pdev->dev);
+	else return;
+	if (enabled){
+		if ((pdata) && (pdata->set_backlight)){
+			backlight = mdss_panel_calc_backlight(get_bkl_lvl()); 
+		#ifdef RET_WORKGROUND
+			cancel_delayed_work_sync(&back_to_backlight_work);
+			schedule_delayed_work(&back_to_backlight_work, msecs_to_jiffies(RET_WORKGROUND_DELAY-62));
+		#else
+			pdata->set_backlight(pdata,backlight);
+		#endif
+		}else return;
+	}else{
+		if ((pdata) && (pdata->set_backlight)){
+			backlight = get_bkl_lvl();
+			pdata->set_backlight(pdata,backlight);
+		#ifdef RET_WORKGROUND
+			cancel_delayed_work_sync(&back_to_pcc_work);
+			schedule_delayed_work(&back_to_pcc_work, msecs_to_jiffies(RET_WORKGROUND_DELAY+80));
+		#else
+			mdss_panel_calc_backlight(backlight);
+		#endif
+		}else return;
+
+	}
+
+} 
+
+void set_elvss_off_threshold(int value)
+{
+	elvss_off_threshold = value;
+}
+
+int get_elvss_off_threshold(void)
+{
+	return elvss_off_threshold;
+}
+
+bool if_flicker_free_enabled(void)
+{
+	return mdss_backlight_enable;
+}
+
+static int __init flicker_free_init(void)
+{
+	memset(&pcc_config, 0, sizeof(struct mdp_pcc_cfg_data));
+	pcc_config.version = mdp_pcc_v1_7;
+	pcc_config.block = MDP_LOGICAL_BLOCK_DISP_0;
+	payload = kzalloc(sizeof(struct mdp_pcc_data_v1_7),GFP_USER);
+	memset(&dither_config, 0, sizeof(struct mdp_dither_cfg_data));
+	dither_config.version = mdp_dither_v1_7;
+	dither_config.block = MDP_LOGICAL_BLOCK_DISP_0;
+	dither_payload = kzalloc(sizeof(struct mdp_dither_data_v1_7),GFP_USER);
+#ifdef RET_WORKGROUND
+	INIT_DELAYED_WORK(&back_to_backlight_work, back_to_backlight);
+	INIT_DELAYED_WORK(&back_to_pcc_work,back_to_pcc);
+#endif
+	return 0;
+}
+
+static void __exit flicker_free_exit(void)
+{
+	kfree(payload);
+	kfree(dither_payload);
+}
+
+late_initcall(flicker_free_init);
+module_exit(flicker_free_exit); 
diff --git a/drivers/video/fbdev/msm/flicker_free.h b/drivers/video/fbdev/msm/flicker_free.h
new file mode 100644
index 000000000000..d0de55eec8ce
--- /dev/null
+++ b/drivers/video/fbdev/msm/flicker_free.h
@@ -0,0 +1,59 @@
+/*
+ * An flicker free driver based on Qcom MDSS for OLED devices
+ *
+ * Copyright (C) 2012-2014, The Linux Foundation. All rights reserved.
+ * Copyright (C) Sony Mobile Communications Inc. All rights reserved.
+ * Copyright (C) 2014-2018, AngeloGioacchino Del Regno <kholk11@gmail.com>
+ * Copyright (C) 2018, Devries <therkduan@gmail.com>
+ * Copyright (C) 2019-2020, Tanish <tanish2k09.dev@gmail.com>
+ * Copyright (C) 2020, shxyke <shxyke@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _FLICKER_FREE_H
+#define _FLICKER_FREE_H
+
+#define FF_MAX_SCALE 32768 /* Maximum value of RGB possible */
+
+#define FF_MIN_SCALE 5120 /* Minimum value of RGB recommended */
+
+#define RET_WORKGROUND
+#define RET_WORKGROUND_DELAY 200
+
+#define BACKLIGHT_INDEX 66
+
+static const int bkl_to_pcc[BACKLIGHT_INDEX] = {42, 56, 67, 75, 84, 91, 98, 104,
+	109, 114, 119, 124, 128, 133, 136, 140, 143, 146, 150, 152, 156, 159,
+	162, 165, 168, 172, 176, 178, 181, 184, 187, 189, 192, 194, 196, 199,
+	202, 204, 206, 209, 211, 213, 215, 217, 220, 222, 224, 226, 228, 230,
+	233, 236, 237, 239, 241, 241, 243, 245, 246, 249, 249, 250, 252, 254, 255, 256};
+
+/* Constants - Customize as needed */
+static int elvss_off_threshold = 66; /* Minimum backlight value that does not flicker */
+
+
+/* with this function you can set the flicker free into enabled or disabled */
+void set_flicker_free(bool enabled);
+
+/* you can use this function to remap the phisical backlight level */
+u32 mdss_panel_calc_backlight(u32 bl_lvl);
+
+/* set the minimum backlight value that does not flicker on your device */
+void set_elvss_off_threshold(int value);
+
+/* get the current elvss value */
+int get_elvss_off_threshold(void);
+
+/* get the current flicker free status (enabled or disabled) */
+bool if_flicker_free_enabled(void);
+
+#endif  /* _FLICKER_FREE_H */
diff --git a/drivers/video/fbdev/msm/flicker_free_enabler.c b/drivers/video/fbdev/msm/flicker_free_enabler.c
new file mode 100644
index 000000000000..9c9b5f010820
--- /dev/null
+++ b/drivers/video/fbdev/msm/flicker_free_enabler.c
@@ -0,0 +1,121 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/slab.h>
+#include <asm/uaccess.h>
+
+#include "flicker_free.h"
+
+#define PROC_NAME "flicker_free"
+
+#define PROC_DIR_NAME "flicker_free"
+#define MIN_BRIGHTNESS "min_brightness"
+
+struct proc_dir_entry *root_entry;
+
+struct proc_dir_entry *enabled, *minbright;
+
+static int show_ff_enabled( struct seq_file *seq, void *v)
+{
+        seq_printf(seq, "%d\n", (if_flicker_free_enabled()?1:0));
+        return 0;
+}
+
+static int my_open_ff_enabled(struct inode *inode, struct file *file)
+{
+    return single_open(file, show_ff_enabled, NULL);
+}
+
+static ssize_t my_write_procmem( struct file *file, const char __user *buffer,
+                            size_t count, loff_t *pos)
+{
+    int value;
+    value = 0;
+    get_user(value,buffer);
+    switch (value)
+    {
+    case '0':
+        set_flicker_free(false);
+        break;
+
+    default:
+        set_flicker_free(true);
+        break;
+    }
+    return count;
+}
+
+static ssize_t my_write_procbright( struct file *file, const char __user *buffer,
+                            size_t count, loff_t *pos)
+{
+    int value = 0;
+    char *tmp = kzalloc((count+1), GFP_KERNEL);  
+    if(!tmp)  
+        return -ENOMEM;  
+    if(copy_from_user(tmp, buffer, count))  
+    {  
+        kfree(tmp);  
+        return EFAULT;  
+    }  
+    if(!kstrtoint(tmp,10,&value))
+    {
+        set_elvss_off_threshold(value);
+    }else{
+        kfree(tmp);
+        return EFAULT;
+    }
+    kfree(tmp);
+    return count;
+}
+
+static int show_procbright( struct seq_file *seq, void *v)
+{
+    seq_printf(seq, "%d\n", get_elvss_off_threshold());
+    return 0;
+}
+
+static int my_open_procbright(struct inode *inode, struct file *file)
+{
+    return single_open(file, show_procbright, NULL);
+}
+
+static const struct file_operations proc_file_fops_enable = {
+    .owner = THIS_MODULE,
+    .open = my_open_ff_enabled,
+    .read = seq_read,
+    .write = my_write_procmem,
+    .llseek = seq_lseek,
+    .release = single_release,
+};
+
+static const struct file_operations proc_file_fops_minbright = {
+    .owner = THIS_MODULE,
+    .open = my_open_procbright,
+    .read = seq_read,
+    .write = my_write_procbright,
+    .llseek = seq_lseek,
+    .release = single_release,
+};
+
+static int __init init( void )
+{
+    root_entry = proc_mkdir(PROC_DIR_NAME, NULL);
+    enabled = proc_create(PROC_NAME, 0x0666, root_entry, &proc_file_fops_enable);
+    minbright = proc_create(MIN_BRIGHTNESS, 0x0666, root_entry, &proc_file_fops_minbright);
+    if (!enabled && !minbright) {
+        return ( -EINVAL );
+    }
+
+    return 0;
+}
+
+static void __exit cleanup( void )
+{
+        remove_proc_entry(PROC_NAME, root_entry);
+        remove_proc_entry(MIN_BRIGHTNESS, root_entry);
+}
+
+module_init( init );
+module_exit( cleanup );
+
diff --git a/drivers/video/fbdev/msm/mdss_fb.c b/drivers/video/fbdev/msm/mdss_fb.c
index d00a607a1689..240141502b27 100644
--- a/drivers/video/fbdev/msm/mdss_fb.c
+++ b/drivers/video/fbdev/msm/mdss_fb.c
@@ -2069,8 +2069,15 @@ void mdss_fb_set_backlight(struct msm_fb_data_type *mfd, u32 bkl_lvl)
 		} else {
 			if (mfd->bl_level != bkl_lvl)
 				bl_notify_needed = true;
+		#ifdef CONFIG_FLICKER_FREE
+			ff_mfd_copy = mfd;
+			ff_bkl_lvl_cpy = temp;
+			pr_debug("backlight sent to panel :%d\n", mdss_panel_calc_backlight(temp));
+			pdata->set_backlight(pdata, mdss_panel_calc_backlight(temp));
+		#else
 			pr_debug("backlight sent to panel :%d\n", temp);
 			pdata->set_backlight(pdata, temp);
+		#endif
 			mfd->bl_level = bkl_lvl;
 			mfd->bl_level_scaled = temp;
 		}
@@ -2083,6 +2090,17 @@ void mdss_fb_set_backlight(struct msm_fb_data_type *mfd, u32 bkl_lvl)
 	}
 }
 
+#ifdef CONFIG_FLICKER_FREE
+struct msm_fb_data_type *get_mfd_copy(void)
+{
+	return ff_mfd_copy;
+}
+
+u32 get_bkl_lvl(void){
+	return ff_bkl_lvl_cpy;
+}
+#endif
+
 void mdss_fb_update_backlight(struct msm_fb_data_type *mfd)
 {
 	struct mdss_panel_data *pdata;
@@ -2104,7 +2122,13 @@ void mdss_fb_update_backlight(struct msm_fb_data_type *mfd)
 				mdss_fb_bl_update_notify(mfd,
 					NOTIFY_TYPE_BL_AD_ATTEN_UPDATE);
 			mdss_fb_bl_update_notify(mfd, NOTIFY_TYPE_BL_UPDATE);
+		#ifdef CONFIG_FLICKER_FREE
+			ff_mfd_copy = mfd;
+			ff_bkl_lvl_cpy = temp;
+			pdata->set_backlight(pdata, mdss_panel_calc_backlight(temp));
+		#else
 			pdata->set_backlight(pdata, temp);
+		#endif
 			mfd->bl_level_scaled = mfd->unset_bl_level;
 			mfd->allow_bl_update = true;
 		}
diff --git a/drivers/video/fbdev/msm/mdss_fb.h b/drivers/video/fbdev/msm/mdss_fb.h
index 4d2888246b7c..60e7d6a3efd9 100644
--- a/drivers/video/fbdev/msm/mdss_fb.h
+++ b/drivers/video/fbdev/msm/mdss_fb.h
@@ -24,6 +24,14 @@
 #include "mdss_panel.h"
 #include "mdss_mdp_splash_logo.h"
 
+#ifdef CONFIG_FLICKER_FREE
+#include "flicker_free.h"
+static struct msm_fb_data_type *ff_mfd_copy;
+static u32 ff_bkl_lvl_cpy;
+struct msm_fb_data_type *get_mfd_copy(void);
+u32 get_bkl_lvl(void);
+#endif
+
 #define MDSS_LPAE_CHECK(phys)	\
 	((sizeof(phys) > sizeof(unsigned long)) ? ((phys >> 32) & 0xFF) : (0))
 
diff --git a/drivers/video/fbdev/msm/mdss_mdp.h b/drivers/video/fbdev/msm/mdss_mdp.h
index 9c93c500d127..e857cb418c4b 100644
--- a/drivers/video/fbdev/msm/mdss_mdp.h
+++ b/drivers/video/fbdev/msm/mdss_mdp.h
@@ -1853,6 +1853,10 @@ int mdss_mdp_pa_config(struct msm_fb_data_type *mfd,
 			struct mdp_pa_cfg_data *config, u32 *copyback);
 int mdss_mdp_pa_v2_config(struct msm_fb_data_type *mfd,
 			struct mdp_pa_v2_cfg_data *config, u32 *copyback);
+void pcc_combine(struct mdp_pcc_cfg_data *kernel,
+			struct mdp_pcc_cfg_data *user, struct mdp_pcc_cfg_data *real);
+int mdss_mdp_kernel_pcc_config(struct msm_fb_data_type *mfd,
+			struct mdp_pcc_cfg_data *cfg_ptr, u32 *copyback);
 int mdss_mdp_pcc_config(struct msm_fb_data_type *mfd,
 			struct mdp_pcc_cfg_data *cfg_ptr, u32 *copyback);
 int mdss_mdp_igc_lut_config(struct msm_fb_data_type *mfd,
diff --git a/drivers/video/fbdev/msm/mdss_mdp_pp.c b/drivers/video/fbdev/msm/mdss_mdp_pp.c
index f2afd04eaf29..b5ecdb418ddf 100644
--- a/drivers/video/fbdev/msm/mdss_mdp_pp.c
+++ b/drivers/video/fbdev/msm/mdss_mdp_pp.c
@@ -577,6 +577,7 @@ static struct mdp_pp_feature_ops *pp_ops;
 
 static DEFINE_MUTEX(mdss_pp_mutex);
 static struct mdss_pp_res_type *mdss_pp_res;
+static bool userpcc_en, kernelpcc_en;
 
 static u32 pp_hist_read(char __iomem *v_addr,
 				struct pp_hist_col_info *hist_info);
@@ -3880,6 +3881,183 @@ static void pp_update_pcc_regs(char __iomem *addr,
 	writel_relaxed(cfg_ptr->b.rgb_1, addr + 8);
 }
 
+static u32 pcc_rescale(u32 kernel, u32 user)
+{
+	u32 val = 0;
+
+	if (kernel == 0 || kernel > 32768)
+		kernel = 32768;
+	if (user == 0 || user > 32768)
+		user = 32768;
+	val = (kernel * user) / 32768;
+	return val < 2560 ? 2560 : val;
+}
+
+static void pcc_v1_7_combine(struct mdp_pcc_data_v1_7 **kernel,
+		struct mdp_pcc_data_v1_7 **user,
+		struct mdp_pcc_data_v1_7 **real)
+{
+	struct mdp_pcc_data_v1_7 *real_cpy;
+	real_cpy = kzalloc(sizeof(struct mdp_pcc_data_v1_7), GFP_USER);
+	if (!(*real)) {
+		*real = kzalloc(sizeof(struct mdp_pcc_data_v1_7), GFP_USER);
+		if (!(*real)) {
+			pr_err("%s: alloc failed!", __func__);
+			return;
+		}
+	}
+	if(kernelpcc_en&&(*kernel)&&userpcc_en&&(*user)){
+		real_cpy->r.c = (*user)->r.c? pcc_rescale((*kernel)->r.r, (*user)->r.c)*3/4: 0;
+		real_cpy->r.r = (*user)->r.g? pcc_rescale((*kernel)->r.r, (*user)->r.r)*3/4: pcc_rescale((*kernel)->r.r, (*user)->r.r);
+		real_cpy->r.g = (*user)->r.g? pcc_rescale((*kernel)->r.r, (*user)->r.g)*3/4: 0;
+		real_cpy->r.b = (*user)->r.b? pcc_rescale((*kernel)->r.r, (*user)->r.b)*3/4: 0;
+		real_cpy->r.rg = (*user)->r.rg? pcc_rescale((*kernel)->r.r, (*user)->r.rg)*3/4: 0;
+		real_cpy->r.gb = (*user)->r.gb? pcc_rescale((*kernel)->r.r, (*user)->r.gb)*3/4: 0;
+		real_cpy->r.rb = (*user)->r.rb? pcc_rescale((*kernel)->r.r, (*user)->r.rb)*3/4: 0;
+		real_cpy->r.rgb = (*user)->r.rgb? pcc_rescale((*kernel)->r.r, (*user)->r.rgb)*3/4: 0;
+		real_cpy->g.c = (*user)->g.c? pcc_rescale((*kernel)->r.r, (*user)->g.c)*3/4: 0;
+		real_cpy->g.g = (*user)->g.r? pcc_rescale((*kernel)->r.r, (*user)->g.g)*3/4: pcc_rescale((*kernel)->r.r, (*user)->g.g);
+		real_cpy->g.r = (*user)->g.r? pcc_rescale((*kernel)->r.r, (*user)->g.r)*3/4: 0;
+		real_cpy->g.b = (*user)->g.b? pcc_rescale((*kernel)->r.r, (*user)->g.b)*3/4: 0;
+		real_cpy->g.rg = (*user)->g.rg? pcc_rescale((*kernel)->r.r, (*user)->g.rg)*3/4: 0;
+		real_cpy->g.gb = (*user)->g.gb? pcc_rescale((*kernel)->r.r, (*user)->g.gb)*3/4: 0;
+		real_cpy->g.rb = (*user)->g.rb? pcc_rescale((*kernel)->r.r, (*user)->g.rb)*3/4: 0;
+		real_cpy->g.rgb = (*user)->g.rgb? pcc_rescale((*kernel)->r.r, (*user)->g.rgb)*3/4: 0;
+		real_cpy->b.c = (*user)->b.c? pcc_rescale((*kernel)->r.r, (*user)->b.c)*3/4: 0;
+		real_cpy->b.b = (*user)->b.r? pcc_rescale((*kernel)->r.r, (*user)->b.b)*3/4: pcc_rescale((*kernel)->r.r, (*user)->b.b);
+		real_cpy->b.r = (*user)->b.r? pcc_rescale((*kernel)->r.r, (*user)->b.r)*3/4: 0;
+		real_cpy->b.g = (*user)->b.g? pcc_rescale((*kernel)->r.r, (*user)->b.g)*3/4: 0;
+		real_cpy->b.rg = (*user)->b.rg? pcc_rescale((*kernel)->r.r, (*user)->b.rg)*3/4: 0;
+		real_cpy->b.gb = (*user)->b.gb? pcc_rescale((*kernel)->r.r, (*user)->b.gb)*3/4: 0;
+		real_cpy->b.rb = (*user)->b.rb? pcc_rescale((*kernel)->r.r, (*user)->b.rb)*3/4: 0;
+		real_cpy->b.rgb = (*user)->b.rgb? pcc_rescale((*kernel)->r.r, (*user)->b.rgb)*3/4: 0;
+	}else{
+		if(userpcc_en&&(*user)){
+			memcpy(real_cpy, (*user), sizeof(struct mdp_pcc_data_v1_7));
+		}else{
+			if(kernelpcc_en&&(*kernel)){
+				memcpy(real_cpy, (*kernel), sizeof(struct mdp_pcc_data_v1_7));
+			}else{
+				real_cpy->r.r = 32768;
+				real_cpy->g.g = 32768;
+				real_cpy->b.b = 32768;
+			}
+		}
+	}
+	memcpy(*real, real_cpy, sizeof(struct mdp_pcc_data_v1_7));
+	kfree(real_cpy);
+}
+
+void pcc_combine(struct mdp_pcc_cfg_data *kernel,
+		struct mdp_pcc_cfg_data *user,
+		struct mdp_pcc_cfg_data *real)
+{
+	uint32_t k_ops, u_ops;
+	struct mdp_pcc_data_v1_7 *v17_kernel_data, *v17_user_data,
+				*v17_real_data;
+
+	if (!real) {
+		real = kzalloc(sizeof(struct mdp_pcc_cfg_data), GFP_KERNEL);
+		if (!real) {
+			pr_err("%s: alloc failed!", __func__);
+			return;
+		}
+	}
+
+	real->version = mdp_pcc_v1_7;
+	real->block = MDP_LOGICAL_BLOCK_DISP_0;
+
+	k_ops = kernel->cfg_payload ? kernel->ops : MDP_PP_OPS_DISABLE;
+	u_ops = user->cfg_payload ? user->ops : MDP_PP_OPS_DISABLE;
+	kernelpcc_en = kernel && !(kernel->ops & MDP_PP_OPS_DISABLE);
+	userpcc_en = user && !(user->ops & MDP_PP_OPS_DISABLE);
+
+	// user configuration may change often, but the kernel configuration
+	// will correspond to calibration data which should only change if
+	// there is a mode switch. we only care about the base
+	// coefficients from the user config.
+
+	if (!kernelpcc_en || (kernel->r.r == 0 && kernel->g.g == 0 && kernel->b.b == 0)){
+		kernel->r.r = kernel->g.g = kernel->b.b = 32768;
+	}
+	if (!userpcc_en || (user->r.r == 0 && user->g.g == 0 && user->b.b ==0)){
+		user->r.r = user->g.g = user->b.b = 32768;
+	}
+
+
+	real->r.r = pcc_rescale(kernel->r.r, user->r.r);
+	real->g.g = pcc_rescale(kernel->g.g, user->g.g);
+	real->b.b = pcc_rescale(kernel->b.b, user->b.b);
+	v17_kernel_data = kernel->cfg_payload;
+	v17_user_data = user->cfg_payload;
+	v17_real_data = real->cfg_payload;
+	pcc_v1_7_combine(&v17_kernel_data, &v17_user_data, &v17_real_data);
+	if (kernelpcc_en && userpcc_en)
+		real->ops = k_ops | u_ops;
+	else if (kernelpcc_en)
+		real->ops = k_ops;
+	else if (userpcc_en)
+		real->ops = u_ops;
+	else
+		real->ops = MDP_PP_OPS_DISABLE;
+}
+
+int mdss_mdp_kernel_pcc_config(struct msm_fb_data_type *mfd,
+				struct mdp_pcc_cfg_data *config,
+				u32 *copyback)
+{
+	int ret = 0;
+	u32 disp_num;
+	struct mdss_pp_res_type_v1_7 *res_cache;
+	struct mdp_pcc_data_v1_7 *v17_kernel_data, v17_usr_config, 
+			*v17_user_data, *v17_real_data;
+
+	ret = pp_validate_dspp_mfd_block(mfd, config->block);
+	if (ret) {
+		pr_err("Invalid block %d mfd index %d, ret %d\n",
+				config->block,
+				(mfd ? mfd->index : -1), ret);
+		return ret;
+	}
+	mutex_lock(&mdss_pp_mutex);
+	disp_num = config->block - MDP_LOGICAL_BLOCK_DISP_0;
+
+	if (!config || !mdss_pp_res) {
+		pr_err("invalid param config %pK pp_res %pK\n",
+			config, mdss_pp_res);
+		return -EINVAL;
+	}
+
+	res_cache = mdss_pp_res->pp_data_v1_7;
+	mdss_pp_res->kernel_pcc_disp_cfg[disp_num] = *config;
+	v17_kernel_data = &res_cache->kernel_pcc_v17_data[disp_num];
+	v17_user_data = &res_cache->user_pcc_v17_data[disp_num];
+	v17_real_data = &res_cache->pcc_v17_data[disp_num];
+	mdss_pp_res->kernel_pcc_disp_cfg[disp_num].cfg_payload =
+		(void *) v17_kernel_data;
+	mdss_pp_res->user_pcc_disp_cfg[disp_num].cfg_payload =
+		(void *) v17_user_data;
+	mdss_pp_res->pcc_disp_cfg[disp_num].cfg_payload =
+		(void *) v17_real_data;
+	memcpy(&v17_usr_config, config->cfg_payload, sizeof(v17_usr_config));
+	ret = 0;
+	if ((config->ops & MDP_PP_OPS_DISABLE)&&
+		!(config->ops & MDP_PP_OPS_WRITE)) {
+		pr_debug("disable pcc\n");
+		pr_debug("op for pcc %d\n", config->ops);
+		ret = 0;
+		goto kernel_pcc_config_exit;
+	}
+	memcpy(v17_kernel_data, &v17_usr_config, sizeof(v17_usr_config));
+	pcc_combine(&mdss_pp_res->kernel_pcc_disp_cfg[disp_num],
+			&mdss_pp_res->user_pcc_disp_cfg[disp_num],
+			&mdss_pp_res->pcc_disp_cfg[disp_num]);
+	mdss_pp_res->pp_disp_flags[disp_num] |= PP_FLAGS_DIRTY_PCC;
+kernel_pcc_config_exit:
+	mutex_unlock(&mdss_pp_mutex);
+	return ret;
+}
+
 int mdss_mdp_pcc_config(struct msm_fb_data_type *mfd,
 				struct mdp_pcc_cfg_data *config,
 				u32 *copyback)
diff --git a/drivers/video/fbdev/msm/mdss_mdp_pp.h b/drivers/video/fbdev/msm/mdss_mdp_pp.h
index 136e2d79787c..7ce5cd84b710 100644
--- a/drivers/video/fbdev/msm/mdss_mdp_pp.h
+++ b/drivers/video/fbdev/msm/mdss_mdp_pp.h
@@ -136,6 +136,8 @@ struct mdss_pp_res_type_v1_7 {
 	struct mdp_hist_lut_data_v1_7 hist_lut_v17_data[MDSS_BLOCK_DISP_NUM];
 	struct mdp_dither_data_v1_7 dither_v17_data[MDSS_BLOCK_DISP_NUM];
 	struct mdp_gamut_data_v1_7 gamut_v17_data[MDSS_BLOCK_DISP_NUM];
+	struct mdp_pcc_data_v1_7 kernel_pcc_v17_data[MDSS_BLOCK_DISP_NUM];
+	struct mdp_pcc_data_v1_7 user_pcc_v17_data[MDSS_BLOCK_DISP_NUM];
 	struct mdp_pcc_data_v1_7 pcc_v17_data[MDSS_BLOCK_DISP_NUM];
 	struct mdp_pa_data_v1_7 pa_v17_data[MDSS_BLOCK_DISP_NUM];
 	struct mdp_pa_dither_res_data_v1_7 pa_dither_data[MDSS_BLOCK_DISP_NUM];
@@ -187,6 +189,8 @@ struct mdss_pp_res_type {
 	struct mdp_dither_cfg_data pa_dither_cfg[MDSS_BLOCK_DISP_NUM];
 	/* physical info */
 	struct pp_hist_col_info *dspp_hist;
+	struct mdp_pcc_cfg_data kernel_pcc_disp_cfg[MDSS_BLOCK_DISP_NUM];
+	struct mdp_pcc_cfg_data user_pcc_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	/*
 	 * The pp_data_v1_7 will be a pointer to newer MDP revisions of the
 	 * pp_res, which will hold the cfg_payloads of each feature in a single
diff --git a/drivers/video/fbdev/msm/mdss_mdp_pp_cache_config.c b/drivers/video/fbdev/msm/mdss_mdp_pp_cache_config.c
index a5ec7097e0f6..c0aa29210ba4 100644
--- a/drivers/video/fbdev/msm/mdss_mdp_pp_cache_config.c
+++ b/drivers/video/fbdev/msm/mdss_mdp_pp_cache_config.c
@@ -650,7 +650,8 @@ static int pp_pcc_cache_params_v1_7(struct mdp_pcc_cfg_data *config,
 	u32 disp_num;
 	int ret = 0;
 	struct mdss_pp_res_type_v1_7 *res_cache;
-	struct mdp_pcc_data_v1_7 *v17_cache_data, v17_usr_config;
+	struct mdp_pcc_data_v1_7 *v17_kernel_data, v17_usr_config, 
+			*v17_user_data, *v17_real_data;
 
 	if (!config || !mdss_pp_res) {
 		pr_err("invalid param config %pK pp_res %pK\n",
@@ -674,15 +675,26 @@ static int pp_pcc_cache_params_v1_7(struct mdp_pcc_cfg_data *config,
 		return -EINVAL;
 	} else {
 		disp_num = config->block - MDP_LOGICAL_BLOCK_DISP_0;
-		mdss_pp_res->pcc_disp_cfg[disp_num] = *config;
-		v17_cache_data = &res_cache->pcc_v17_data[disp_num];
+		mdss_pp_res->user_pcc_disp_cfg[disp_num] = *config;
+		v17_kernel_data = &res_cache->kernel_pcc_v17_data[disp_num];
+		v17_user_data = &res_cache->user_pcc_v17_data[disp_num];
+		v17_real_data = &res_cache->pcc_v17_data[disp_num];
+		mdss_pp_res->kernel_pcc_disp_cfg[disp_num].cfg_payload =
+			(void *) v17_kernel_data;
+		mdss_pp_res->user_pcc_disp_cfg[disp_num].cfg_payload =
+			(void *) v17_user_data;
 		mdss_pp_res->pcc_disp_cfg[disp_num].cfg_payload =
-			(void *) v17_cache_data;
+			(void *) v17_real_data;
 		if (copy_from_user(&v17_usr_config, config->cfg_payload,
 				   sizeof(v17_usr_config))) {
+#if defined(CONFIG_FB_MSM_MDSS_KCAL_CTRL) || defined(CONFIG_FLICKER_FREE)
+			memcpy(&v17_usr_config, config->cfg_payload, sizeof(v17_usr_config));
+			ret = 0;
+#else
 			pr_err("failed to copy v17 pcc\n");
 			ret = -EFAULT;
 			goto pcc_config_exit;
+#endif
 		}
 		if ((config->ops & MDP_PP_OPS_DISABLE)) {
 			pr_debug("disable pcc\n");
@@ -693,7 +705,10 @@ static int pp_pcc_cache_params_v1_7(struct mdp_pcc_cfg_data *config,
 			pr_debug("op for pcc %d\n", config->ops);
 			goto pcc_config_exit;
 		}
-		memcpy(v17_cache_data, &v17_usr_config, sizeof(v17_usr_config));
+		memcpy(v17_user_data, &v17_usr_config, sizeof(v17_usr_config));
+		pcc_combine(&mdss_pp_res->kernel_pcc_disp_cfg[disp_num],
+				&mdss_pp_res->user_pcc_disp_cfg[disp_num],
+				&mdss_pp_res->pcc_disp_cfg[disp_num]);
 	}
 pcc_config_exit:
 	return ret;
diff --git a/drivers/video/fbdev/msm/mdss_mdp_pp_v1_7.c b/drivers/video/fbdev/msm/mdss_mdp_pp_v1_7.c
index aabf7c507376..fe5f9b98c379 100644
--- a/drivers/video/fbdev/msm/mdss_mdp_pp_v1_7.c
+++ b/drivers/video/fbdev/msm/mdss_mdp_pp_v1_7.c
@@ -1103,8 +1103,12 @@ static int pp_pcc_get_config(char __iomem *base_addr, void *cfg_data,
 
 	if (copy_to_user(pcc_cfg->cfg_payload, &pcc_data,
 			 sizeof(pcc_data))) {
+	#ifdef CONFIG_FLICKER_FREE
+		memcpy(pcc_cfg->cfg_payload,  &pcc_data, sizeof(pcc_data));
+	#else
 		pr_err("failed to copy the pcc info into payload\n");
 		return -EFAULT;
+	#endif
 	}
 
 	return 0;
-- 
2.20.1

